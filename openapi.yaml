openapi: 3.0.0
info:
  title: Tufin MCP Server API
  version: "0.1.0" # Match application version
  description: |
    MCP Server providing a unified interface to Tufin SecureTrack and SecureChange APIs.
    Requires an API Key passed in the X-API-Key header for most endpoints.

servers:
  - url: http://localhost:8000 # Default local server, adjust as needed
    description: Development server
  # Add production server URL here later
  # - url: https://your-production-mcp-server.com
  #   description: Production server

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API Key for authenticating requests.

  schemas:
    # --- Generic Schemas --- 
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
          description: A description of the error.
      required:
        - detail

    # --- Health Schemas --- 
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok]
      required:
        - status

    # --- SecureChange Ticket Schemas (Based on models/securechange.py) --- 
    TicketBase:
      type: object
      properties:
        subject:
          type: string
        description:
          type: string
          nullable: true
      required:
        - subject
      # Add other common fields from TicketBase here

    TicketCreate:
      allOf:
        - $ref: '#/components/schemas/TicketBase'
      # Add fields specific to creation here if any

    TicketResponse:
      allOf:
        - $ref: '#/components/schemas/TicketBase'
      properties:
        id:
          type: integer
        status:
          type: string
      required:
        - id
        - status
      # Add other fields from TicketResponse here

    TicketListResponse:
      type: object
      properties:
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/TicketResponse'
        total:
          type: integer
      required:
        - tickets
        - total

    # --- SecureTrack Device Schemas (Based on models/securetrack.py) --- 
    DeviceResponse:
      type: object
      description: Device representation returned by the MCP API.
      properties:
        id:
          type: string
        name:
          type: string
          nullable: true
        vendor:
          type: string
          nullable: true
        model:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
          description: Maps to Tufin OS_Version
        ip_address:
          type: string
          nullable: true
          description: Maps to Tufin ip
        domain_name: 
          type: string
          nullable: true
        status:
          type: string
          nullable: true
      required:
        - id
      # Add other fields WE exposed in models/securetrack.py DeviceResponse

    DeviceListResponse:
      type: object
      description: Device list representation returned by the MCP API.
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/DeviceResponse'
        total:
          type: integer
          description: Total number of devices matching the filter criteria.
        count:
          type: integer
          description: Number of devices included in this response batch.
      required:
        - devices
        - total
        - count

    DeviceDataAdd:
      type: object
      description: "Generic placeholder for vendor/model specific device_data. Client must provide the correct structure based on Tufin documentation for the target device type."
      additionalProperties: true

    DeviceAddRequest:
      type: object
      description: "Request model for adding a single device within the bulk request."
      properties:
        display_name:
          type: string
        ip_address:
          type: string
          nullable: true
        vendor:
          type: string
        model:
          type: string
          nullable: true
        enable_topology:
          type: boolean
          default: true
        securetrack_domain:
          type: string
          default: "Default"
        device_data:
          $ref: '#/components/schemas/DeviceDataAdd'
      required:
        - display_name
        - vendor
        - device_data

    DeviceBulkAddRequest:
      type: object
      description: "Request model for the MCP API to add one or more devices."
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/DeviceAddRequest'
          minItems: 1
      required:
        - devices

    DeviceBulkAddResponse:
      type: object
      description: "Response model indicating acceptance of the bulk add request."
      properties:
        message:
          type: string
        detail:
          type: string
          nullable: true
      required:
        - message

    # --- Device Import Schemas ---
    ManagedDeviceImportDetail:
      type: object
      description: "Details of managed devices to import (structure varies slightly by parent type)."
      properties:
        name:
          type: string
          description: "Name of the DG, ADOM, VNet, VPC, Context, or EOS device."
        import_all:
          type: boolean
          nullable: true
          description: "Applicable for Panorama, FortiManager, Meraki (import all sub-devices?)."
        managed_devices:
          type: array
          nullable: true
          items:
            type: string
          description: "List of specific sub-device names to import (if import_all is false for applicable types)."
      required:
        - name
        
    DeviceImportRequestData:
      type: object
      description: "Data specific to the import operation for a parent device."
      properties:
        import_all:
          type: boolean
          description: "Whether to import all available managed entities (used by some parent types)."
        import_devices:
          type: array
          items:
            $ref: '#/components/schemas/ManagedDeviceImportDetail'
          description: "List of specific managed entities to import."
        collect_rule_usage:
          type: boolean
          nullable: true
        collect_object_usage:
          type: boolean
          nullable: true
      required:
        - import_all
        - import_devices # Even if empty?
        
    DeviceImportItem:
      type: object
      description: "Represents a single parent device update in the MCP bulk import request."
      properties:
        device_id:
          type: string
          description: "ID of the existing parent management device (e.g., Panorama, FortiManager)."
        device_data:
          $ref: '#/components/schemas/DeviceImportRequestData'
      required:
        - device_id
        - device_data
        
    DeviceBulkImportRequest:
      type: object
      description: "Request model for the MCP API to import managed devices."
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/DeviceImportItem'
          minItems: 1
      required:
        - devices

    DeviceBulkImportResponse:
      type: object
      description: "Response model indicating acceptance of the bulk import request."
      properties:
        message:
          type: string
        detail:
          type: string
          nullable: true
      required:
        - message

    # --- Tufin Topology Path Response Models (Complex - Keep definitions brief here) ---
    NatEntry: # Add brief schemas or reference external file if too complex
      type: object 
      # ... properties ...
    InterfaceInfo:
      type: object
      # ... properties ...
    RouteInfo:
      type: object
      # ... properties ...
    NextDevice:
      type: object
      # ... properties ...
    IpsecInfo:
      type: object
      # ... properties ...
    PbrAction:
      type: object
      # ... properties ...
    PbrEntry:
      type: object
      # ... properties ...
    RuleInfo:
      type: object
      # ... properties ...
    BindingInfo:
      type: object
      # ... properties ...
    SdwanEntry:
      type: object
      # ... properties ...
    DevicePathInfo:
      type: object
      # ... properties ...
    UnroutedElement:
      type: object
      # ... properties ...
      
    # TufinTopologyPathResponse: # Raw Tufin response - not directly exposed usually
      # type: object
      # properties: 
      #   traffic_allowed: { type: boolean }
      #   device_info: { type: array, items: { $ref: '#/components/schemas/DevicePathInfo' } }
      #   unrouted_elements: { type: array, items: { $ref: '#/components/schemas/UnroutedElement' } }
      # required: [traffic_allowed]

    # --- MCP API Topology Path Response --- 
    TopologyPathResponse: # Updated definition
      type: object
      description: Summarized path query response returned by the MCP API for easier consumption.
      properties:
        traffic_allowed:
          type: boolean
          description: Indicates if the specified traffic is allowed according to the policy analysis.
        is_fully_routed:
          type: boolean
          description: Indicates if a complete route was found (no unrouted elements).
        path_device_names:
          type: array
          nullable: true
          description: List of device names in the path (only populated if traffic_allowed and is_fully_routed are true).
          items: 
            type: string
        # Removed complex fields
        # path_details: 
        #   type: array
        #   nullable: true
        #   items: 
        #     $ref: '#/components/schemas/DevicePathInfo' # Reference the complex nested object
        # unrouted_elements:
        #   type: array
        #   nullable: true
        #   items:
        #     $ref: '#/components/schemas/UnroutedElement'
      required:
        - traffic_allowed
        - is_fully_routed

    # --- GraphQL Rule Query Schemas ---
    RuleQueryRequest:
      type: object
      properties:
        tql_filter:
          type: string
          nullable: true
          description: "Tufin Query Language (TQL) filter string."
          example: "action accept and destination.ip 8.8.8.8"
          
    RuleZoneInfo:
      type: object
      properties:
        text: { type: string, nullable: true }
        
    RuleNetworkObjectInfo:
      type: object
      properties:
        text: { type: string, nullable: true }
        zones: { type: array, nullable: true, items: { $ref: '#/components/schemas/RuleZoneInfo' } }
        
    RuleServiceObjectInfo:
      type: object
      properties:
        text: { type: string, nullable: true }
        
    RuleApplicationObjectInfo:
      type: object
      properties:
        text: { type: string, nullable: true }
        
    RuleUserObjectInfo:
      type: object
      properties:
        text: { type: string, nullable: true }
        
    RuleInstallOnObjectInfo:
      type: object
      properties:
        text: { type: string, nullable: true }
        
    RuleVpnObjectInfo:
      type: object
      properties:
        text: { type: string, nullable: true }
        
    RuleMetadata:
      type: object
      properties:
        certificationStatus: { type: string, nullable: true }
        technicalOwner: { type: string, nullable: true }
        applicationOwner: { type: string, nullable: true }
        ruleDescription: { type: string, nullable: true }
        businessOwner: { type: string, nullable: true }

    RuleDetail:
      type: object
      description: "Represents selected details of a firewall rule returned by MCP."
      properties:
        id: { type: string }
        name: { type: string, nullable: true }
        action: { type: string, nullable: true }
        comment: { type: string, nullable: true }
        disabled: { type: boolean, nullable: true }
        implicit: { type: boolean, nullable: true }
        metadata: { $ref: '#/components/schemas/RuleMetadata', nullable: true }
        source: { $ref: '#/components/schemas/RuleNetworkObjectInfo', nullable: true }
        destination: { $ref: '#/components/schemas/RuleNetworkObjectInfo', nullable: true }
        service: { $ref: '#/components/schemas/RuleServiceObjectInfo', nullable: true }
        application: { $ref: '#/components/schemas/RuleApplicationObjectInfo', nullable: true }
        user: { $ref: '#/components/schemas/RuleUserObjectInfo', nullable: true }
        installOn: { $ref: '#/components/schemas/RuleInstallOnObjectInfo', nullable: true }
        vpn: { $ref: '#/components/schemas/RuleVpnObjectInfo', nullable: true }
      required: [id] 

    RuleQueryResponseValues:
      type: object
      properties:
        count: { type: integer }
        values: { type: array, items: { $ref: '#/components/schemas/RuleDetail' } }
      required: [count, values]

    RuleQueryResponse:
      type: object
      description: "MCP API response for a rule query."
      properties:
        rules: { $ref: '#/components/schemas/RuleQueryResponseValues' }
      required: [rules]

# --- Reusable Responses (Optional but good practice) ---
components:
  responses:
    UnauthorizedError:
      description: Unauthorized (Missing or invalid API Key)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ForbiddenError:
      description: Forbidden (Insufficient permissions)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    RateLimitError:
      description: Too Many Requests (Rate limit exceeded)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFoundError:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse' 

paths:
  /health:
    get:
      tags:
        - Management
      summary: Health Check
      description: Simple health check endpoint. Does not require authentication.
      operationId: health_check
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
  
  /api/v1/tickets:
    get:
      tags:
        - SecureChange Tickets
      summary: List Tickets
      description: List SecureChange tickets based on query parameters. Requires list_tickets permission.
      operationId: list_tickets_api_v1_tickets_get
      security:
        - ApiKeyAuth: []
      parameters:
        # TODO: Add query parameters for filtering (status, assignee, etc.) based on implementation
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
          description: Maximum number of tickets to return.
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
          description: Number of tickets to skip.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketListResponse'
        '401':
          description: Unauthorized (Missing or invalid API Key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests (Rate limit exceeded)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - SecureChange Tickets
      summary: Create Ticket
      description: Create a new SecureChange ticket. Requires create_ticket permission.
      operationId: create_ticket_api_v1_tickets_post
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketCreate'
      responses:
        '201':
          description: Successful Creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError' # Reference common response
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        # Add 422 Validation Error if needed

  /api/v1/devices:
    get:
      tags:
        - SecureTrack Devices
      summary: List Devices
      description: List SecureTrack devices based on query parameters. Requires list_devices permission.
      operationId: list_devices_api_v1_devices_get
      security:
        - ApiKeyAuth: []
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
          description: Filter by device status (e.g., 'started', 'stopped')
        - name: name
          in: query
          required: false
          schema:
            type: string
          description: Filter by device name (check Tufin docs for syntax/matching)
        - name: vendor
          in: query
          required: false
          schema:
            type: string
          description: Filter by vendor name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /api/v1/devices/bulk:
    post:
      tags:
        - SecureTrack Devices
      summary: Add Devices (Bulk)
      description: |
        Add one or more devices to SecureTrack.
        Requires add_devices permission.
        The request body requires vendor/model specific data in the 'device_data' field for each device.
        Returns 202 Accepted on success, processing happens asynchronously in Tufin.
      operationId: add_devices_bulk_api_v1_devices_bulk_post
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceBulkAddRequest'
      responses:
        '202':
          description: Request accepted for processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceBulkAddResponse'
        '400':
          description: Bad Request (e.g., invalid input format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error / Error during Tufin communication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/devices/bulk/import:
    post:
      tags:
        - SecureTrack Devices
      summary: Import Managed Devices (Bulk)
      description: |
        Import managed devices (Device Groups, ADOMs, Contexts, VNets, etc.) 
        into existing parent management devices in SecureTrack.
        Requires import_managed_devices permission.
        The request body requires details specific to the parent device type, provided within the items of the main 'devices' list.
        Returns 202 Accepted on success, processing happens asynchronously in Tufin.
      operationId: import_managed_devices_bulk_api_v1_devices_bulk_import_post
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceBulkImportRequest'
            examples: # Add examples based on Tufin docs
              panoramaExample:
                summary: Example for Panorama
                value:
                  devices:
                    - device_id: "1" # ID of the Panorama device
                      device_data:
                        import_all: false
                        import_devices:
                          - name: "DG1"
                            import_all: false
                            managed_devices: ["fw1", "fw2"]
                          - name: "DG2"
                            import_all: true
              asaExample:
                summary: Example for ASA
                value:
                  devices:
                    - device_id: "3" # ID of the ASA device
                      device_data:
                        import_all: false # Usually false for ASA contexts
                        import_devices: # List of context names (strings, need to adapt model/client?)
                          - name: "context1" # Name field used for consistency, value is context name
                          - name: "context2"
      responses:
        '202':
          description: Request accepted for processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceBulkImportResponse'
        '400':
          description: Bad Request (e.g., invalid input format or structure for device type)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error / Error during Tufin communication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/devices/{device_id}:
    get:
      tags:
        - SecureTrack Devices
      summary: Get Device
      description: Get details for a specific SecureTrack device. Requires get_device permission.
      operationId: get_device_api_v1_devices__device_id__get
      security:
        - ApiKeyAuth: []
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the device to retrieve.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '404': # Assuming a 404 if device not found
          $ref: '#/components/responses/NotFoundError' 

  /api/v1/topology/path: # Changed path from /query
    get: # Changed method from POST to GET
      tags:
        - SecureTrack Topology
      summary: Get Topology Path
      description: Run a topology path query in SecureTrack. Requires run_topology_query permission.
      operationId: get_topology_path_api_v1_topology_path_get # Updated ID
      security:
        - ApiKeyAuth: []
      parameters: # Changed from requestBody to parameters
        - name: src
          in: query
          required: true
          schema:
            type: string
          description: Source IP address or object name
        - name: dst
          in: query
          required: true
          schema:
            type: string
          description: Destination IP address or object name (with optional port like host:port)
        - name: service
          in: query
          required: true
          schema:
            type: string
          description: Service name (e.g., 'any', 'Facebook') or port/protocol (e.g., 'tcp:80')
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyPathResponse' # Updated schema ref
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '502': # Added for potential parsing errors
          description: Bad Gateway (Error parsing Tufin response)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/topology/path/image:
    get:
      tags:
        - SecureTrack Topology
      summary: Get Topology Path Image
      description: Get the topology path image from SecureTrack. Requires get_topology_path_image permission.
      operationId: get_topology_path_image_api_v1_topology_path_image_get
      security:
        - ApiKeyAuth: []
      parameters: # Use same parameters as /topology/path
        - name: src
          in: query
          required: true
          schema:
            type: string
          description: Source IP address or object name
        - name: dst
          in: query
          required: true
          schema:
            type: string
          description: Destination IP address or object name (with optional port like host:port)
        - name: service
          in: query
          required: true
          schema:
            type: string
          description: Service name (e.g., 'any', 'Facebook') or port/protocol (e.g., 'tcp:80')
      responses:
        '200':
          description: Topology path image generated successfully.
          content:
            image/png: # Assume PNG, adjust if needed
              schema:
                type: string
                format: binary 
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Path or resources not found to generate image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '502': 
          description: Bad Gateway (Error retrieving data from Tufin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Tufin API Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/graphql/rules:
    post:
      tags:
        - SecureTrack GraphQL
      summary: Query Rules (GraphQL)
      description: |
        Query SecureTrack firewall rules using GraphQL and an optional TQL filter.
        Returns a standard set of rule properties.
        Requires query_rules_graphql permission.
      operationId: query_rules_graphql_api_v1_graphql_rules_post
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true # Body required, but filter inside is optional
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleQueryRequest'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleQueryResponse'
        '400':
          description: Bad Request (e.g., invalid TQL filter or GraphQL error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '502':
          description: Bad Gateway (Error parsing Tufin response)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service Unavailable (Error connecting to Tufin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 